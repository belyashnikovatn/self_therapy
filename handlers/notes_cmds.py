from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from constants import NOTES_COUNT
from db.operations import (
    add_note,
    delete_note,
    get_note,
    get_notes,
    update_note
)
from keyboards import (
    kb_main_menu,
    kb_notes
)

router = Router()


class AddMood(StatesGroup):
    """For mood tracking"""
    progress = State()


class AddSelfesteem(StatesGroup):
    """For selfesteem tracking"""
    progress = State()


class EditNote(StatesGroup):
    """For any note tracking"""
    progress = State()


@router.message(F.text.startswith('üéâ'))
@router.message(F.text.startswith('üë§'))
async def cmd_pre_post(message: Message, state: FSMContext):
    """Add into diary emotion/selfesteem: first step."""
    await state.clear()
    if message.text.startswith('üéâ'):
        text = ('–í—Å–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ/–ø—Ä–∏—è—Ç–Ω–æ–≥–æ/—Ö–æ—Ä–æ—à–µ–≥–æ –≤—ã '
        '—Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, –Ω–æ –≤–∞–∂–Ω–æ, '
        '—á—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –µ—â—ë –Ω–∏–∫–æ–º—É –Ω–µ —Å–∫–∞–∑–∞–ª–∏. –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –≤–µ—â—å.')
        await state.set_state(AddSelfesteem.progress)
    elif message.text.startswith('üë§'):
        text = ('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—Ç–µ \n'
        '–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ—Ç –ø–ª–æ—Ö–∏—Ö –∏–ª–∏ —Ö–æ—Ä–æ—à–∏—Ö —ç–º–æ—Ü–∏–π: –≤—Å–µ –æ–Ω–∏ –≤–∞–∂–Ω—ã. \n')
        await state.set_state(AddMood.progress)
    await message.answer(
        text=text,
        reply_markup=kb_main_menu.stop_fsm()
    )


@router.message(AddMood.progress, F.text)
async def cmd_mood_post(message: Message, state: FSMContext):
    """Add an emotion: second last step."""
    await add_note(
        user_id=message.from_user.id,
        type='mood',
        text=message.text
    )
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å',
        reply_markup=kb_notes.mood()
    )
    await state.clear()


@router.message(AddSelfesteem.progress, F.text)
async def cmd_selfesteem_post(message: Message, state: FSMContext):
    """Add a selfesteem: second last step."""
    await add_note(
        user_id=message.from_user.id,
        type='selfesteem',
        text=message.text
    )
    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ!',
        reply_markup=kb_notes.selfesteem()
    )
    await state.clear()


@router.message(F.text.startswith('üóí –î–Ω–µ–≤–Ω–∏–∫'))
async def cmd_notes_get(message: Message, state: FSMContext):
    """Get diary by type: emotions or selfesteem."""
    await state.clear()
    type = message.text.split(' ')[-1]
    if  type == '—ç–º–æ—Ü–∏–π':
        type = 'mood'
    elif type == '—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏':
        type = 'selfesteem'

    notes = await get_notes(
        user_id=message.from_user.id,
        type=type,
        count=NOTES_COUNT
    )
    if notes:
        await message.answer(
            '–ó–∞–ø–∏—Å–∏ –Ω–∏–∂–µ –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é',
            reply_markup=kb_notes.notes_list(notes))
    else:
        await message.answer(
            text='–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏',
            reply_markup=kb_main_menu.main_kb()
        )


@router.callback_query(F.data.startswith('manage_note_'))
async def cmd_note_get(call: CallbackQuery, state: FSMContext):
    """Get a note of any type to edit or delete."""
    await call.answer()
    await state.clear()
    note_id = int(call.data.replace('manage_note_', ''))
    note = await get_note(note_id=note_id)
    await call.message.answer(
        text=f'–í–æ—Ç –∑–∞–ø–∏—Å—å {note["text"]}',
        reply_markup=kb_notes.manage_note(note_id)
        )


@router.callback_query(F.data.startswith('edit_note_'))
async def cmd_note_pre_put(call: CallbackQuery, state: FSMContext):
    """Editing text from any note by id: first step."""
    await state.clear()
    note_id = int(call.data.replace('edit_note_', ''))
    await call.answer(f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç {note_id}')
    await state.update_data(note_id=note_id)
    await call.message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç {note_id}')
    await state.set_state(EditNote.progress)


@router.message(EditNote.progress, F.text)
async def cmd_note_put(message: Message, state: FSMContext):
    """Editing text from any note by id: last step."""
    note_data = await state.get_data()
    note_id = note_data['note_id']
    note = await get_note(note_id=note_id)

    text = message.text.strip()
    await update_note(
        note_id=note_id,
        text=text
    )
    await state.clear()

    notes = await get_notes(
        user_id=message.from_user.id,
        type=note['type'],
        count=NOTES_COUNT
    )
    if notes:
        await message.answer(
            text='–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞!',
            reply_markup=kb.notes_list(notes)
        )
    else:
        await message.answer(
            text='–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏',
            reply_markup=kb_main_menu.main_kb()
        )


@router.callback_query(F.data.startswith('delete_note_'))
async def cmd_note_delete(call: CallbackQuery, state: FSMContext):
    """Delete any note by id."""
    await state.clear()
    note_id = int(call.data.replace('delete_note_', ''))
    note = await get_note(note_id=note_id)
    await delete_note(note_id=note_id)
    await call.answer(
        text=f'–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä {note_id} —É–¥–∞–ª–µ–Ω–∞',
        show_alert=True,
    )
    await call.message.delete()

    notes = await get_notes(
        user_id=call.from_user.id,
        type=note['type'],
        count=NOTES_COUNT
    )
    if notes:
        await call.message.answer(
            text='–ó–∞–ø–∏—Å–∏ –Ω–∏–∂–µ –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é',
            reply_markup=kb_notes.notes_list(notes)
        )
    else:
        await call.message.answer(
            text='–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏',
            reply_markup=kb_main_menu.main_kb()
        )
