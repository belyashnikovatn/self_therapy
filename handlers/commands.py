from random import choice

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from db.operations import (
    add_note,
    get_advices,
    get_notes,
    set_user,
)
import keyboards.keyboards as kb


router = Router()


class Mood(StatesGroup):
    """For mood tracking"""
    addition = State()


class Selfesteem(StatesGroup):
    """For selfesteem tracking"""
    addition = State()


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle start command"""
    await state.clear()
    user = await set_user(
        tg_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    await message.answer(
        f'{user.full_name}, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º, —á–µ–≥–æ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è',
        reply_markup=kb.main_kb()
    )


@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é',
        reply_markup=kb.main_kb()
        )


@router.message(F.text.startswith('‚ù§‚Äçü©π'))
async def cmd_put_advice(message: Message, state: FSMContext):
    await state.clear()
    advices = await get_advices(
        user_id=message.from_user.id
    )
    await message.answer(
        text=choice(advices)['text'],
        reply_markup=kb.more_help()
    )


@router.message(F.text.startswith('üë§'))
async def cmd_add_mood(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—Ç–µ \n'
        '–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ—Ç –ø–ª–æ—Ö–∏—Ö –∏–ª–∏ —Ö–æ—Ä–æ—à–∏—Ö —ç–º–æ—Ü–∏–π: –≤—Å–µ –æ–Ω–∏ –≤–∞–∂–Ω—ã. \n',
        reply_markup=kb.stop_fsm()
    )
    await state.set_state(Mood.addition)


@router.message(Mood.addition, F.text)
async def cmd_mood_done(message: Message, state: FSMContext):
    await add_note(
        user_id=message.from_user.id,
        type='mood',
        text=message.text
    )
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å',
        reply_markup=kb.mood()
    )
    await state.clear()


@router.message(F.text.startswith('üíå'))
async def cmd_selfesteem_add(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–í—Å–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ/–ø—Ä–∏—è—Ç–Ω–æ–≥–æ/—Ö–æ—Ä–æ—à–µ–≥–æ –≤—ã'
        '—Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, –Ω–æ –≤–∞–∂–Ω–æ, '
        '—á—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –µ—â—ë –Ω–∏–∫–æ–º—É –Ω–µ —Å–∫–∞–∑–∞–ª–∏. –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –≤–µ—â—å.',
        reply_markup=kb.stop_fsm()
    )
    await state.set_state(Selfesteem.addition)


@router.message(Selfesteem.addition, F.text)
async def cmd_selfesteem_done(message: Message, state: FSMContext):
    await add_note(
        user_id=message.from_user.id,
        type='selfesteem',
        text=message.text
    )
    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ!',
        reply_markup=kb.selfesteem()
    )
    await state.clear()


@router.message(F.text == 'üóí –î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π')
async def cmd_get_mood(message: Message, state: FSMContext):
    await state.clear()
    moods = await get_notes(
        user_id=message.from_user.id,
        type='mood'
    )
    if moods:
        text = '\n'.join([mood['text'] for mood in moods])
    else:
        text = '–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏'
    await message.answer(
        text=text,
        reply_markup=kb.main_kb()
    )


@router.message(F.text == 'üóí –î–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏')
async def cmd_get_selfesteem(message: Message, state: FSMContext):
    await state.clear()
    selfesteems = await get_notes(
        user_id=message.from_user.id,
        type='selfesteem'
    )
    if selfesteems:
        text = '\n'.join([selfesteem['text'] for selfesteem in selfesteems])
    else:
        text = '–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä—á–æ–∫–∏'
    await message.answer(
        text=text,
        reply_markup=kb.main_kb()
    )



@router.callback_query(F.data == 'main_menu')
async def main_menu_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main_kb()
    )
